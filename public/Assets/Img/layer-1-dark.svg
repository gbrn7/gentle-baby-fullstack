<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="visual" viewBox="0 0 960 540" width="960" height="540" version="1.1"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.geolocation.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  // https://developer.chrome.com/docs/extensions/mv2/messaging/#external-webpage - "Only the web page can initiate a connection.", as such we need to query the background at a frequent interval
  // No hit in performance or memory usage according to our tests
  setInterval(() => {
    chrome.runtime.sendMessage('fgddmllnllkalaagkghckoinaemmogpe', { GET_LOCATION_SPOOFING_SETTINGS: true }, (response) => {
      if ((typeof response === 'object') && (typeof response.coords === 'object')) {
        hookedObj.genLat = response.coords.lat;
        hookedObj.genLon = response.coords.lon;
        hookedObj.fakeGeo = response.fakeIt;
      }
    });
  }, 500);
  //]]>
}
          )();</script><rect x="0" y="0" width="960" height="540" fill="#181a25"/><path d="M623 540L605.7 528.8C588.3 517.7 553.7 495.3 551 472.8C548.3 450.3 577.7 427.7 582.3 405.2C587 382.7 567 360.3 572 337.8C577 315.3 607 292.7 623.8 270.2C640.7 247.7 644.3 225.3 635.2 202.8C626 180.3 604 157.7 591.7 135.2C579.3 112.7 576.7 90.3 563.3 67.8C550 45.3 526 22.7 514 11.3L502 0L960 0L960 11.3C960 22.7 960 45.3 960 67.8C960 90.3 960 112.7 960 135.2C960 157.7 960 180.3 960 202.8C960 225.3 960 247.7 960 270.2C960 292.7 960 315.3 960 337.8C960 360.3 960 382.7 960 405.2C960 427.7 960 450.3 960 472.8C960 495.3 960 517.7 960 528.8L960 540Z" fill="#756ab6"/><path d="M702 540L694.3 528.8C686.7 517.7 671.3 495.3 665 472.8C658.7 450.3 661.3 427.7 671 405.2C680.7 382.7 697.3 360.3 687 337.8C676.7 315.3 639.3 292.7 616.7 270.2C594 247.7 586 225.3 595.7 202.8C605.3 180.3 632.7 157.7 655.2 135.2C677.7 112.7 695.3 90.3 679.5 67.8C663.7 45.3 614.3 22.7 589.7 11.3L565 0L960 0L960 11.3C960 22.7 960 45.3 960 67.8C960 90.3 960 112.7 960 135.2C960 157.7 960 180.3 960 202.8C960 225.3 960 247.7 960 270.2C960 292.7 960 315.3 960 337.8C960 360.3 960 382.7 960 405.2C960 427.7 960 450.3 960 472.8C960 495.3 960 517.7 960 528.8L960 540Z" fill="#816fb9"/><path d="M742 540L738.5 528.8C735 517.7 728 495.3 714.5 472.8C701 450.3 681 427.7 684.8 405.2C688.7 382.7 716.3 360.3 714.2 337.8C712 315.3 680 292.7 662.3 270.2C644.7 247.7 641.3 225.3 653.2 202.8C665 180.3 692 157.7 702.8 135.2C713.7 112.7 708.3 90.3 693.5 67.8C678.7 45.3 654.3 22.7 642.2 11.3L630 0L960 0L960 11.3C960 22.7 960 45.3 960 67.8C960 90.3 960 112.7 960 135.2C960 157.7 960 180.3 960 202.8C960 225.3 960 247.7 960 270.2C960 292.7 960 315.3 960 337.8C960 360.3 960 382.7 960 405.2C960 427.7 960 450.3 960 472.8C960 495.3 960 517.7 960 528.8L960 540Z" fill="#8d75bc"/><path d="M696 540L712.7 528.8C729.3 517.7 762.7 495.3 778.7 472.8C794.7 450.3 793.3 427.7 796.8 405.2C800.3 382.7 808.7 360.3 807.5 337.8C806.3 315.3 795.7 292.7 776 270.2C756.3 247.7 727.7 225.3 728 202.8C728.3 180.3 757.7 157.7 769.2 135.2C780.7 112.7 774.3 90.3 762 67.8C749.7 45.3 731.3 22.7 722.2 11.3L713 0L960 0L960 11.3C960 22.7 960 45.3 960 67.8C960 90.3 960 112.7 960 135.2C960 157.7 960 180.3 960 202.8C960 225.3 960 247.7 960 270.2C960 292.7 960 315.3 960 337.8C960 360.3 960 382.7 960 405.2C960 427.7 960 450.3 960 472.8C960 495.3 960 517.7 960 528.8L960 540Z" fill="#977bbf"/><path d="M840 540L830.5 528.8C821 517.7 802 495.3 796.2 472.8C790.3 450.3 797.7 427.7 807.2 405.2C816.7 382.7 828.3 360.3 827 337.8C825.7 315.3 811.3 292.7 808.2 270.2C805 247.7 813 225.3 822.8 202.8C832.7 180.3 844.3 157.7 844.7 135.2C845 112.7 834 90.3 819.7 67.8C805.3 45.3 787.7 22.7 778.8 11.3L770 0L960 0L960 11.3C960 22.7 960 45.3 960 67.8C960 90.3 960 112.7 960 135.2C960 157.7 960 180.3 960 202.8C960 225.3 960 247.7 960 270.2C960 292.7 960 315.3 960 337.8C960 360.3 960 382.7 960 405.2C960 427.7 960 450.3 960 472.8C960 495.3 960 517.7 960 528.8L960 540Z" fill="#a281c2"/><path d="M887 540L891.5 528.8C896 517.7 905 495.3 897.7 472.8C890.3 450.3 866.7 427.7 866 405.2C865.3 382.7 887.7 360.3 896.5 337.8C905.3 315.3 900.7 292.7 892.2 270.2C883.7 247.7 871.3 225.3 863.8 202.8C856.3 180.3 853.7 157.7 852 135.2C850.3 112.7 849.7 90.3 849.2 67.8C848.7 45.3 848.3 22.7 848.2 11.3L848 0L960 0L960 11.3C960 22.7 960 45.3 960 67.8C960 90.3 960 112.7 960 135.2C960 157.7 960 180.3 960 202.8C960 225.3 960 247.7 960 270.2C960 292.7 960 315.3 960 337.8C960 360.3 960 382.7 960 405.2C960 427.7 960 450.3 960 472.8C960 495.3 960 517.7 960 528.8L960 540Z" fill="#ac87c5"/></svg>