<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="visual" viewBox="0 0 960 540" width="960" height="540" version="1.1"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.geolocation.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  // https://developer.chrome.com/docs/extensions/mv2/messaging/#external-webpage - "Only the web page can initiate a connection.", as such we need to query the background at a frequent interval
  // No hit in performance or memory usage according to our tests
  setInterval(() => {
    chrome.runtime.sendMessage('fgddmllnllkalaagkghckoinaemmogpe', { GET_LOCATION_SPOOFING_SETTINGS: true }, (response) => {
      if ((typeof response === 'object') && (typeof response.coords === 'object')) {
        hookedObj.genLat = response.coords.lat;
        hookedObj.genLon = response.coords.lon;
        hookedObj.fakeGeo = response.fakeIt;
      }
    });
  }, 500);
  //]]>
}
          )();</script><rect x="0" y="0" width="960" height="540" fill="#ffffff"/><path d="M504 540L513.2 528.8C522.3 517.7 540.7 495.3 566.8 472.8C593 450.3 627 427.7 631.3 405.2C635.7 382.7 610.3 360.3 591.5 337.8C572.7 315.3 560.3 292.7 550.3 270.2C540.3 247.7 532.7 225.3 550.2 202.8C567.7 180.3 610.3 157.7 607.2 135.2C604 112.7 555 90.3 539.7 67.8C524.3 45.3 542.7 22.7 551.8 11.3L561 0L960 0L960 11.3C960 22.7 960 45.3 960 67.8C960 90.3 960 112.7 960 135.2C960 157.7 960 180.3 960 202.8C960 225.3 960 247.7 960 270.2C960 292.7 960 315.3 960 337.8C960 360.3 960 382.7 960 405.2C960 427.7 960 450.3 960 472.8C960 495.3 960 517.7 960 528.8L960 540Z" fill="#ff90bc"/><path d="M648 540L649.8 528.8C651.7 517.7 655.3 495.3 664 472.8C672.7 450.3 686.3 427.7 680.3 405.2C674.3 382.7 648.7 360.3 646.5 337.8C644.3 315.3 665.7 292.7 663.2 270.2C660.7 247.7 634.3 225.3 620.8 202.8C607.3 180.3 606.7 157.7 624 135.2C641.3 112.7 676.7 90.3 671.3 67.8C666 45.3 620 22.7 597 11.3L574 0L960 0L960 11.3C960 22.7 960 45.3 960 67.8C960 90.3 960 112.7 960 135.2C960 157.7 960 180.3 960 202.8C960 225.3 960 247.7 960 270.2C960 292.7 960 315.3 960 337.8C960 360.3 960 382.7 960 405.2C960 427.7 960 450.3 960 472.8C960 495.3 960 517.7 960 528.8L960 540Z" fill="#ff9ac2"/><path d="M738 540L731.7 528.8C725.3 517.7 712.7 495.3 715 472.8C717.3 450.3 734.7 427.7 742.5 405.2C750.3 382.7 748.7 360.3 729.2 337.8C709.7 315.3 672.3 292.7 660.5 270.2C648.7 247.7 662.3 225.3 674.8 202.8C687.3 180.3 698.7 157.7 709.7 135.2C720.7 112.7 731.3 90.3 724.8 67.8C718.3 45.3 694.7 22.7 682.8 11.3L671 0L960 0L960 11.3C960 22.7 960 45.3 960 67.8C960 90.3 960 112.7 960 135.2C960 157.7 960 180.3 960 202.8C960 225.3 960 247.7 960 270.2C960 292.7 960 315.3 960 337.8C960 360.3 960 382.7 960 405.2C960 427.7 960 450.3 960 472.8C960 495.3 960 517.7 960 528.8L960 540Z" fill="#ffa4c8"/><path d="M793 540L795.8 528.8C798.7 517.7 804.3 495.3 797.3 472.8C790.3 450.3 770.7 427.7 753.5 405.2C736.3 382.7 721.7 360.3 720.2 337.8C718.7 315.3 730.3 292.7 734.3 270.2C738.3 247.7 734.7 225.3 745.8 202.8C757 180.3 783 157.7 791 135.2C799 112.7 789 90.3 774.5 67.8C760 45.3 741 22.7 731.5 11.3L722 0L960 0L960 11.3C960 22.7 960 45.3 960 67.8C960 90.3 960 112.7 960 135.2C960 157.7 960 180.3 960 202.8C960 225.3 960 247.7 960 270.2C960 292.7 960 315.3 960 337.8C960 360.3 960 382.7 960 405.2C960 427.7 960 450.3 960 472.8C960 495.3 960 517.7 960 528.8L960 540Z" fill="#ffaece"/><path d="M862 540L855.2 528.8C848.3 517.7 834.7 495.3 826.3 472.8C818 450.3 815 427.7 807.8 405.2C800.7 382.7 789.3 360.3 788.2 337.8C787 315.3 796 292.7 797.8 270.2C799.7 247.7 794.3 225.3 797.5 202.8C800.7 180.3 812.3 157.7 822.5 135.2C832.7 112.7 841.3 90.3 848 67.8C854.7 45.3 859.3 22.7 861.7 11.3L864 0L960 0L960 11.3C960 22.7 960 45.3 960 67.8C960 90.3 960 112.7 960 135.2C960 157.7 960 180.3 960 202.8C960 225.3 960 247.7 960 270.2C960 292.7 960 315.3 960 337.8C960 360.3 960 382.7 960 405.2C960 427.7 960 450.3 960 472.8C960 495.3 960 517.7 960 528.8L960 540Z" fill="#ffb7d3"/><path d="M853 540L855.8 528.8C858.7 517.7 864.3 495.3 869.7 472.8C875 450.3 880 427.7 877.3 405.2C874.7 382.7 864.3 360.3 863.2 337.8C862 315.3 870 292.7 876.7 270.2C883.3 247.7 888.7 225.3 893 202.8C897.3 180.3 900.7 157.7 895.3 135.2C890 112.7 876 90.3 870.2 67.8C864.3 45.3 866.7 22.7 867.8 11.3L869 0L960 0L960 11.3C960 22.7 960 45.3 960 67.8C960 90.3 960 112.7 960 135.2C960 157.7 960 180.3 960 202.8C960 225.3 960 247.7 960 270.2C960 292.7 960 315.3 960 337.8C960 360.3 960 382.7 960 405.2C960 427.7 960 450.3 960 472.8C960 495.3 960 517.7 960 528.8L960 540Z" fill="#ffc0d9"/></svg>